#user  nginx;
# Set up worker process as per the number of cores available. Always
# match it to the number of cores available for better performance

worker_processes  4;        # one(1) worker or equal the number of _real_ cpu cores. 4=4 core cpu
worker_priority      15;    # renice workers to reduce priority compared to system processes for
                            # machine health. worst case nginx will get ~25% system resources at nice=15
worker_rlimit_nofile 8192; # maximum number of open files

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        /var/log/nginx/nginx.pid;


events {
  worker_connections  4096;  # number of parallel or concurrent connections per worker_processes
  accept_mutex        on;  # serially accept() connections and pass to workers, efficient if workers greater than 1
}

http {
  ## Size Limits
  #client_body_buffer_size   8k;
  #client_header_buffer_size 1k;
  #client_max_body_size      1m;
  #large_client_header_buffers 4 4k/8k;

  # Timeouts, do not keep connections open longer then necessary to reduce
  # resource usage and deny Slowloris type attacks.
  client_body_timeout      10s; # maximum time between packets the client can pause when sending nginx any data
  client_header_timeout    5s; # maximum time the client has to send the entire header to nginx
  keepalive_timeout       75s; # timeout which a single keep-alive client connection will stay open
  send_timeout             10s; # maximum time between packets nginx is allowed to pause when sending the client data

  ## General Options
  #aio                       on;  # asynchronous file I/O, fast with ZFS, make sure sendfile=off
  charset                   utf-8; # adds the line "Content-Type" into response-header, same as "source_charset"
  default_type              application/octet-stream;
  gzip                      on; # disable on the fly gzip compression due to higher latency, only use
  gzip_comp_level           7; # compression level 1-9, 9 being the max
  gzip_disable              "msie6";
  gzip_min_length           1000;
  gzip_proxied              any;  # allows compressed responses for any request even from proxies
  gzip_types                text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
  #gzip_http_version         1.0; # serve gzipped content to all clients including HTTP/1.0
  #gzip_static               on;  # precompress content (gzip -9) with an external script
  gzip_vary                 on;  # send response header "Vary: Accept-Encoding"
  ignore_invalid_headers    on;
  include                   /etc/nginx/mime.types;
  keepalive_requests        50;  # number of requests per connection, does not affect SPDY
  keepalive_disable         none; # allow all browsers to use keepalive connections
  max_ranges                0;   # disabled to stop range header DoS attacks
  msie_padding              off;
  open_file_cache           max=1000 inactive=2h;
  open_file_cache_errors    on;
  open_file_cache_min_uses  1;
  open_file_cache_valid     1h;
  output_buffers            1 512;
  postpone_output           1440;   # postpone sends to match our machine's MSS
  read_ahead                512K;   # kernel read head set to the output_buffers
  recursive_error_pages     on;
  reset_timedout_connection on;  # reset timed out connections freeing ram
  sendfile                  on;  # on for decent direct disk I/O
  server_tokens             off; # version number in error pages
  server_name_in_redirect   off; # if off, nginx will use the requested Host header
  source_charset            utf-8; # same value as "charset"
  tcp_nodelay               on; # Nagle buffering algorithm, used for keepalive only
  tcp_nopush                off;

  ## Log Format
  log_format  main  '$remote_addr $host $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $ssl_cipher $request_time "$http_x_forwarded_for"';

  log_format compression '$remote_addr|$remote_user|$time_local|'
                           '$request|$status|$body_bytes_sent|'
                           '$http_referer|$http_user_agent|$upstream_response_time|$gzip_ratio';
  log_format dscprod ut="$upstream_response_time" cs=$upstream_cache_status us="$upstream_status" ua="$upstream_addr";

  ## Proxy settings. Make sure the "timeout"s are long enough to
  ## take account of over loaded back end servers or long running
  ## cgi scripts. If the proxy timeout is too short the nginx proxy
  ## might re-request the data over and over again, putting more
  ## load on the back end server.
  proxy_max_temp_file_size    0;
  proxy_connect_timeout      900;
  proxy_send_timeout         900;
  proxy_read_timeout         900;
  proxy_buffer_size          4k;
  proxy_buffers              4 32k;
  proxy_busy_buffers_size    64k;
  proxy_temp_file_write_size 64k;
  proxy_intercept_errors     on;

  ## Limit requests per second to 250 requests  per minute. If the
  ## user's ip address goes over the limit they will be sent an
  ## error 503 for every subsequent request.
  limit_req_zone  $binary_remote_addr  zone=gulag:10m   rate=250r/m;

  ## This is our first hostname, internal reverse proxy - Bandhan Any client with a host header
  ## containing any string in this server{} block's server_name directive will be
  ## served from here.

  ## Listener for HHD Traffic

  upstream dsc_443  {
    server 192.168.1.12:9902 max_fails=250 fail_timeout=180s;
    #server 192.168.1.22:9902 max_fails=250 fail_timeout=180s;
}
  server {
    add_header  Cache-Control "public";
    add_header  X-Frame-Options "SAMEORIGIN";
    access_log  /var/log/nginx/ssl_proxy_access.log compression;
    error_log  /var/log/nginx/ssl_proxy_error.log;
    #expires     1h;
    limit_req   zone=gulag  burst=1000 nodelay;
    listen 443 sndbuf=128k;
    server_name dscrpxy;

    root /var/www/html;
    try_files $uri $uri/index.html @dsc_443;

    error_page 503 @maintenance;
    location @maintenance {
       rewrite ^(.*)$ /maintenance.html break;
    }

    ssl on;
    ssl_certificate /etc/nginx/certs/dscrpxy.crt;
    ssl_certificate_key /etc/nginx/certs/dscrpxy.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4+RSA:+HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM:!kEDH:ADH:+EXP;
    #ssl_ciphers ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Only allow GET, HEAD and POST request methods. Since this a proxy you may
    # want to be more restrictive with your request methods. The calls are going
    # to be passed to the back end server and nginx does not know what it
    # normally accepts, so everything gets passed. If we only need to accept GET
    # HEAD and POST then limit that here.
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 403;
    }

    #Browsers always look for a favicon, I rather not flood my logs
    location = /favicon.ico { access_log off; log_not_found off; }

     location @dsc_443 {

      if ($request_uri ~* \.(ico|css|js|gif|jpe?g|png|woff|woff2|eot|ttf)$) {
          expires 72h;
          break;
      }

      proxy_redirect     http:// https://;
      proxy_set_header   Host             $http_host;
      proxy_set_header   X-Real-IP        $remote_addr;
      proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
      proxy_set_header   X-Scheme $scheme;
      proxy_set_header   X-Forwarded-Proto https;
      proxy_set_header   X-Forwarded-Host $host;
      proxy_set_header   X-Server-Address $server_addr;
      # High timeouts to allow bulk upload of images
      proxy_connect_timeout 600;
      proxy_read_timeout 600;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_pass http://dsc_443;
    }


    ## All other errors get the generic error page
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 495 496 497
               500 501 502 504 505 506 507 /error_page.html;
  }

upstream dsc_prod  {
    server 192.168.1.1:9903 max_fails=250 fail_timeout=180s;
    #server 192.168.1.2:9903 max_fails=250 fail_timeout=180s;
}
  server {
    add_header  Cache-Control "public";
    add_header  X-Frame-Options "ALLOW";
    access_log  /var/log/nginx/ssl_proxy_access_dsc.log dscprod;
    error_log  /var/log/nginx/ssl_proxy_error_dsc.log;
    #expires     1h;
    limit_req   zone=gulag  burst=1000 nodelay;
    listen 8443 sndbuf=128k;
    server_name dscrpxy;

    root /var/www/html;
    try_files $uri $uri/indexprod.html @dsc_prod;

    error_page 503 @maintenance;
    location @maintenance {
       rewrite ^(.*)$ /maintenance.html break;
    }

    ssl on;
    ssl_certificate /etc/nginx/certs/dscrpxy.crt;
    ssl_certificate_key /etc/nginx/certs/dscrpxy.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4+RSA:+HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM:!kEDH:ADH:+EXP;
    #ssl_ciphers ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Only allow GET, HEAD and POST request methods. Since this a proxy you may
    # want to be more restrictive with your request methods. The calls are going
    # to be passed to the back end server and nginx does not know what it
    # normally accepts, so everything gets passed. If we only need to accept GET
    # HEAD and POST then limit that here.
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 403;
    }

    #Browsers always look for a favicon, I rather not flood my logs
    location = /favicon.ico { access_log off; log_not_found off; }

     location @dsc_prod {

      if ($request_uri ~* \.(ico|css|js|gif|jpe?g|png|woff|woff2|eot|ttf)$) {
          expires 72h;
          break;
      }

      port_in_redirect off;
      proxy_redirect     http:// https://;
      proxy_set_header   Host             $http_host;
      proxy_set_header   X-Real-IP        $remote_addr;
      proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
      proxy_set_header   X-Scheme $scheme;
      proxy_set_header   X-Forwarded-Proto https;
      proxy_set_header   X-Forwarded-Host $host;
      proxy_set_header   X-Server-Address $server_addr;
      # High timeouts to allow bulk upload of images
      proxy_connect_timeout 600;
      proxy_read_timeout 600;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_pass http://dsc_prod;
    }

    ## All other errors get the generic error page
    #error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 495 496 497
     #          500 501 502 504 505 506 507 /error_page.html;
  }

}

